package ccm;

import org.apache.camel.Exchange;
import org.apache.camel.LoggingLevel;
import org.apache.camel.Processor;

// camel-k: language=java
// camel-k: dependency=mvn:org.apache.camel.quarkus
// camel-k: dependency=mvn:org.apache.camel.camel-quarkus-kafka
// camel-k: dependency=mvn:org.apache.camel.camel-quarkus-jsonpath
// camel-k: dependency=mvn:org.apache.camel.camel-jackson
// camel-k: dependency=mvn:org.apache.camel.camel-splunk-hec
// camel-k: dependency=mvn:org.apache.camel.camel-http
// camel-k: dependency=mvn:org.apache.camel.camel-http-common

//import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.dataformat.JsonLibrary;

import ccm.models.common.event.BaseEvent;
import ccm.models.common.event.CaseUserEvent;
import ccm.models.common.event.Error;
import ccm.models.common.event.EventKPI;
import ccm.utils.DateTimeUtils;
import ccm.utils.KafkaComponentUtils;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.kafka.KafkaComponent;
import org.apache.camel.component.kafka.KafkaConfiguration;
import org.apache.camel.util.jsse.KeyManagersParameters;
import org.apache.camel.util.jsse.KeyStoreParameters;
import org.apache.camel.util.jsse.SSLContextParameters;

public class CcmPidpAdapter2 extends RouteBuilder {
  @Override
  public void configure() throws Exception {

    processCaseUserAccountCreated();
    publishBodyAsEventKPI();
  }

  private void processCaseUserAccountCreated() {
    // use method name as route id
    String routeId = new Object() {}.getClass().getEnclosingMethod().getName();

    // Configure SSL context parameters for the P12 client certificate
    KeyStoreParameters keystore = new KeyStoreParameters();
    keystore.setResource("file:path/to/client.p12");
    keystore.setPassword("clientpassword");
    keystore.setType("PKCS12");

    KeyManagersParameters keyManagers = new KeyManagersParameters();
    keyManagers.setKeyStore(keystore);

    SSLContextParameters sslContext = new SSLContextParameters();
    sslContext.setKeyManagers(keyManagers);

    // Configure Kafka component and set the SSL context parameters
    KafkaComponent kafka = new KafkaComponent();
    kafka.setSslContextParameters(sslContext);
    getContext().addComponent("kafka", kafka);

    // Configure OIDC authentication parameters
    KafkaConfiguration kafkaConfig = new KafkaConfiguration();
    kafkaConfig.setSaslMechanism("OAUTHBEARER");
    kafkaConfig.setSecurityProtocol("SASL_SSL");
    kafkaConfig.setSaslJaasConfig("org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required "
        + "oidc.provider.url='https://oidc-provider.com' "
        + "oidc.client.id='client-id' "
        + "oidc.client.secret='client-secret' "
        + "oidc.token.endpoint='https://token-endpoint.com' "
        + "oidc.username.claim='sub' "
        + "oidc.groups.claim='groups';");

    // IN
    // property: event_object
    from("kafka:{{pidp.kafka.topic.name}}?groupId=ccm-pidp-adapter2&configuration=#kafkaConfig")
    .routeId(routeId)
    .streamCaching() // https://camel.apache.org/manual/faq/why-is-my-message-body-empty.html
    .log(LoggingLevel.DEBUG,"event_key = ${header[event_key]}")
    .process(new Processor() {
      @Override
      public void process(Exchange exchange) {
        CaseUserEvent event = (CaseUserEvent)exchange.getProperty("event_object");
        exchange.getMessage().setHeader("event_key", event.getJustin_rcc_id());
      }
    })
    ;
  }
  
  private void publishBodyAsEventKPI() {
    // use method name as route id
    String routeId = new Object() {}.getClass().getEnclosingMethod().getName();

    //IN: body = EventKPI json
    from("direct:" + routeId)
    .routeId(routeId)
    .streamCaching() // https://camel.apache.org/manual/faq/why-is-my-message-body-empty.html
    .log(LoggingLevel.DEBUG,"Publishing Event KPI to Kafka ...")
    .log(LoggingLevel.DEBUG,"body: ${body}")
    .to("kafka:{{kafka.topic.kpis.name}}")
    .log(LoggingLevel.DEBUG,"Event KPI published.")
    ;
  }


}