quarkus.kubernetes-client.trust-certs=true
quarkus.s2i.base-jvm-image=registry.access.redhat.com/openjdk/openjdk-11-rhel7
quarkus.openshift.route.expose=true
#quarkus.kubernetes.deploy=true
quarkus.openshift.container-name=quarkus-pidp-adapter
quarkus.openshift.replicas=1
quarkus.container-image.build=true


# Uncomment to set resource limits
#quarkus.openshift.resources.requests.memory=200Mi
#quarkus.openshift.resources.requests.cpu=200m
#quarkus.openshift.resources.limits.memory=200Mi
#quarkus.openshift.resources.limits.cpu=100m

#open shift config
quarkus.openshift.app-secret=ccm-secrets
quarkus.kubernetes.secret-volumes.app-secrets.secret-name=ccm-secrets
quarkus.openshift.env.configmaps=ccm-configs

#camel configs
camel.component.http.connect-timeout = 10000
camel.component.http.connection-request-timeout = 10000
camel.component.http.socket-timeout = 30000
camel.component.http.connection-time-to-live = 0
#quarkus.http.access-log.enabled=true

# JADE-Events Kafka topic names
kafka.topic.caseusers.name = ccm-caseusers
kafka.topic.bulk-caseusers.name = ccm-bulk-caseusers
kafka.topic.caseuser-errors.name = ccm-caseuser-errors
kafka.topic.general-errors.name = ccm-general-errors
kafka.topic.kpis.name = ccm-kpis

# PIDP Kafka topic names
pidp.kafka.topic.usercreation.name = ${pidp-kafka-topic-usercreation-name}
pidp.kafka.topic.processresponse.name = ${pidp-kafka-topic-processresponse-name}
pidp.kafka.consumergroup.name = ${pidp-kafka-oauth-client-id}

# PIDP Kafka consumer configuration
camel.component.kafka.brokers = ${pidp-kafka-bootstrapservers-url}
camel.component.kafka.security-protocol = SASL_SSL
camel.component.kafka.sasl-mechanism = OAUTHBEARER
camel.component.kafka.sslKeystoreLocation = /mnt/app-secret/pidp-kafka-client.p12
quarkus.openshift.env.mapping.sslKeystorePassword.from-secret=ccm-secrets
quarkus.openshift.env.mapping.sslKeystorePassword.with-key=pidp-kafka-client.p12-password
camel.component.kafka.sslKeystorePassword = ${sslKeystorePassword}
camel.component.kafka.sslKeystoreType = PKCS12
camel.component.kafka.sslTruststoreLocation = /mnt/app-secret/pidp-kafka-server.p12
quarkus.openshift.env.mapping.sslTruststorePassword.from-secret=ccm-secrets
quarkus.openshift.env.mapping.sslTruststorePassword.with-key=pidp-kafka-server.p12-password
camel.component.kafka.sslTruststorePassword = ${sslTruststorePassword}
camel.component.kafka.sslTruststoreType = PKCS12

quarkus.openshift.env.mapping.oauth-client-secret.from-secret=ccm-secrets
quarkus.openshift.env.mapping.oauth-client-secret.with-key=pidp-kafka-oauth-client-secret

camel.component.kafka.sasl-jaas-config = org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required oauth.client.id='${pidp-kafka-oauth-client-id}' oauth.client.secret='${oauth-client-secret}' oauth.token.endpoint.uri='${pidp-kafka-oauth-token-endpoint-url}';
camel.component.kafka.additional-properties[sasl.login.callback.handler.class] = io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

pidp-host=${pidp-host-url}

ccm.kafka.brokers = ${kafka-broker-url}

# PIDP API OAuth config
quarkus.openshift.env.mapping.pidp-api-oauth-client-secret.from-secret=ccm-secrets
quarkus.openshift.env.mapping.pidp-api-oauth-client-secret.with-key=pidp-api-oauth-client-secret
pidp-api-oauth-client-secret=${pidp-api-oauth-client-secret}
pidp-api-oauth-token-endpoint-url=${pidp-api-oauth-token-endpoint-url}
pidp-api-oauth-client-id=${pidp-api-oauth-client-id}

# PIDP API
pidp-api-host= ${pidp-api-host}
camel.component.kafka.additional-properties[key.subject.name.strategy] = io.confluent.kafka.serializers.subject.RecordNameStrategy
camel.component.kafka.additional-properties[key.deserializer.schema.registry.subject] = UserModificationEvent-key
camel.component.kafka.additional-properties[value.subject.name.strategy] = io.confluent.kafka.serializers.subject.RecordNameStrategy
camel.component.kafka.additional-properties[value.deserializer.schema.registry.subject] = UserModificationEvent-value

quarkus.log.level=INFO
quarkus.log.category."processCaseUserAccountCreated".level=DEBUG